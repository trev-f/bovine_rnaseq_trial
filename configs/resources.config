process {
    /*
    Set what happens if a process fails
    */
    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
    maxRetries = 1

    /*
    Set CPUs
    */
    // default number CPUs
    cpus   = { checkResources(1 * task.attempt, 'cpus') }

    // dynamic numbers CPUs
    withLabel: cpu_mid {
        cpus = { checkResources(2 * task.attempt, 'cpus') }
    }

    withLabel: cpu_high {
        cpus = { checkResources(4 * task.attempt, 'cpus') }
    }

    /*
    Set memory
    */
    // default memory
    memory = { checkResources(2.GB * task.attempt, 'memory') }

    // dynamic levels memory
    withLabel: mem_low {
        memory = { checkResources(1.GB * task.attempt, 'memory') }
    }

    withLabel: mem_mid {
        memory = { checkResources(4.GB * task.attempt, 'memory') }
    }
    
    withLabel: mem_high {
        memory = { checkResources(16.GB * task.attempt, 'memory') }
    }

    /*
    Set time
    */
    // default time
    time = { checkResources(1.hour * task.attempt, 'time') }

    // dynamic levels time
    withLabel: time_low {
        time = { checkResources(30.min * task.attempt, 'time') }
    }

    withLabel: time_mid {
        time = { checkResources(2.hour * task.attempt, 'time') }
    }
    
    withLabel: time_high {
        time = { checkResources(4.hour * task.attempt, 'time') }
    }
}


/*
 * Check that resources don't exceed a max value
 *
 * @param level The level of the resource requested (e.g. 4 CPUs, 8 GB memory, 12 hours)
 * @param resource The resource being check: cpus, memory, or time
 *
 * @return A level for the resource. If level is less than or equal to the max level for that resource, the specified level is returned, else max level is returned.
*/
def checkResources(level, resource) {
    switch (resource) {
        // check cpus
        case 'cpus':
            if (level.compareTo(params.maxCpus) == 1) {
                return params.maxCpus as int
            } else {
                return level
            }
            break
        
        // check memory
        case 'memory':
            if (level.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1) {
                return params.maxMemory as nextflow.util.MemoryUnit
            } else {
                return level
            }
            break
            
        // chek time
        case 'time':
            if (level.compareTo(params.maxTime as nextflow.util.Duration) == 1) {
                return params.maxTime as nextflow.util.Duration
            } else {
                return level
            }
            break
    }
}